/*
 * CodigoPostalPortugalLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.example.models.*;
import com.example.exceptions.*;
import com.example.APIHelper;
import com.example.Configuration;
import com.example.testing.TestHelper;
import com.example.controllers.ConcelhosController;

import com.fasterxml.jackson.core.type.TypeReference;

public class ConcelhosControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static ConcelhosController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getConcelhos();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Obter todos os concelhos
     * @throws Throwable
     */
    @Test
    public void testConTodos() throws Throwable {

        // Set callback and perform API call
        List<ConTodos1> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getConTodos();
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Transfer-Encoding", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Águeda\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Albergaria-a-Velha\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Anadia\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Arouca\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Aveiro\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Castelo de Paiva\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Espinho\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Estarreja\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Santa Maria da Feira\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Ílhavo\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Mealhada\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Murtosa\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Oliveira de Azeméis\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Oliveira do Bairro\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Ovar\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"São João da Madeira\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Sever do Vouga\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Vagos\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Aveiro\",\r\n    \"designacaoConcelho\": \"Vale de Cambra\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Aljustrel\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Almodôvar\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Alvito\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Barrancos\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Beja\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Castro Verde\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Cuba\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Ferreira do Alentejo\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Mértola\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Moura\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Odemira\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Ourique\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Serpa\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Beja\",\r\n    \"designacaoConcelho\": \"Vidigueira\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Amares\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Barcelos\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Braga\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Cabeceiras de Basto\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Celorico de Basto\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Esposende\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Fafe\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Guimarães\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Póvoa de Lanhoso\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Terras de Bouro\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Vieira do Minho\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Vila Nova de Famalicão\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Vila Verde\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Braga\",\r\n    \"designacaoConcelho\": \"Vizela\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Alfândega da Fé\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Bragança\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Carrazeda de Ansiães\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Freixo de Espada à Cinta\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Macedo de Cavaleiros\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Miranda do Douro\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Mirandela\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Mogadouro\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Torre de Moncorvo\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Vila Flor\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Vimioso\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Bragança\",\r\n    \"designacaoConcelho\": \"Vinhais\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Belmonte\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Castelo Branco\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Covilhã\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Fundão\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Idanha-a-Nova\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Oleiros\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Penamacor\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Proença-a-Nova\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Sertã\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Vila de Rei\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Castelo Branco\",\r\n    \"designacaoConcelho\": \"Vila Velha de Ródão\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Arganil\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Cantanhede\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Coimbra\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Condeixa-a-Nova\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Figueira da Foz\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Góis\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Lousã\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Mira\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Miranda do Corvo\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Montemor-o-Velho\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Oliveira do Hospital\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Pampilhosa da Serra\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Penacova\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Penela\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Soure\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Tábua\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Coimbra\",\r\n    \"designacaoConcelho\": \"Vila Nova de Poiares\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Alandroal\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Arraiolos\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Borba\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Estremoz\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Évora\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Montemor-o-Novo\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Mora\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Mourão\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Portel\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Redondo\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Reguengos de Monsaraz\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Vendas Novas\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Évora\",\r\n    \"designacaoConcelho\": \"Viana do Alentejo\"\r\n  }\r\n]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Obter todos os concelhos de um distrito
     * @throws Throwable
     */
    @Test
    public void testConPorDist() throws Throwable {
        // Parameters for the API call
        String designacaoDistrito = "Lisboa";

        // Set callback and perform API call
        List<ConPorDist1> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getConPorDist(designacaoDistrito);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Transfer-Encoding", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Alenquer\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Arruda dos Vinhos\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Azambuja\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Cadaval\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Cascais\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Lisboa\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Loures\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Lourinhã\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Mafra\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Oeiras\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Sintra\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Sobral de Monte Agraço\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Torres Vedras\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Vila Franca de Xira\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Amadora\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Odivelas\"\r\n  }\r\n]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Obter um ou mais concelhos
     * @throws Throwable
     */
    @Test
    public void testConUmConcelho() throws Throwable {
        // Parameters for the API call
        String designacaoConcelho = "Ponta Delgada";

        // Set callback and perform API call
        List<ConUmConcelho1> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getConUmConcelho(designacaoConcelho);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Transfer-Encoding", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[\r\n  {\r\n    \"designacaoDistrito\": \"Ilha de São Miguel\",\r\n    \"designacaoConcelho\": \"Ponta Delgada\"\r\n  }\r\n]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Obter um ou mais concelhos num determinado distrito.
     * @throws Throwable
     */
    @Test
    public void testConNumDist() throws Throwable {
        // Parameters for the API call
        String designacaoDistrito = "Lisboa";
        String designacaoConcelho = "S%";

        // Set callback and perform API call
        List<ConNumDist1> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getConNumDist(designacaoDistrito, designacaoConcelho);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Transfer-Encoding", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Sintra\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Sobral de Monte Agraço\"\r\n  }\r\n]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Erro. Parâmetros válidos: [ designacaoDistrito | designacaoConcelho ]
     * @throws Throwable
     */
    @Test
    public void testConErro1() throws Throwable {
        // Parameters for the API call
        String designacaoDistrito = "Lisboa";
        String designacaoConcelho = "S%";
        String cidade = "Porto";

        // Set callback and perform API call
        List<ConNumDist1> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getConErro1(designacaoDistrito, designacaoConcelho, cidade);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Transfer-Encoding", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Sintra\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Sobral de Monte Agraço\"\r\n  }\r\n]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Erro. Parâmetros válidos: [ designacaoDistrito | designacaoConcelho ]
     * @throws Throwable
     */
    @Test
    public void testConErro2() throws Throwable {
        // Parameters for the API call
        String nomeDistrito = "Lisboa";
        String designacaoConcelho = "S%";

        // Set callback and perform API call
        List<ConNumDist1> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getConErro2(nomeDistrito, designacaoConcelho);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Transfer-Encoding", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Sintra\"\r\n  },\r\n  {\r\n    \"designacaoDistrito\": \"Lisboa\",\r\n    \"designacaoConcelho\": \"Sobral de Monte Agraço\"\r\n  }\r\n]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
