/*
 * CodigoPostalPortugalLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;

import com.example.*;
import com.example.models.*;
import com.example.exceptions.*;
import com.example.http.client.HttpClient;
import com.example.http.client.HttpContext;
import com.example.http.request.HttpRequest;
import com.example.http.response.HttpResponse;
import com.example.http.response.HttpStringResponse;
import com.example.http.client.APICallBack;
import com.example.controllers.syncwrapper.APICallBackCatcher;

public class CodigosController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static CodigosController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the CodigosController class 
     */
    public static CodigosController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new CodigosController();
                }
            }
        }
        return instance;
    }

    /**
     * Obter todos os códigos postais.
     * @return    Returns the List<Geral> response from the API call 
     */
    public List<Geral> getCodTodos(
    ) throws Throwable {

        HttpRequest _request = _buildGetCodTodosRequest();
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCodTodosResponse(_context);
    }

    /**
     * Obter todos os códigos postais.
     */
    public void getCodTodosAsync(
                final APICallBack<List<Geral>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCodTodosRequest();
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<Geral> returnValue = _handleGetCodTodosResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCodTodos
     */
    private HttpRequest _buildGetCodTodosRequest() throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/codigos");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCodTodos
     * @return An object of type List<Geral>
     */
    private List<Geral> _handleGetCodTodosResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<Geral> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Geral>>(){});

        return _result;
    }

    /**
     * Obter os códigos postais para um distrito.
     * @param    designacaoDistrito    Required parameter: Example: 
     * @return    Returns the List<Distrito> response from the API call 
     */
    public List<Distrito> getCodPorDist(
                final String designacaoDistrito
    ) throws Throwable {

        HttpRequest _request = _buildGetCodPorDistRequest(designacaoDistrito);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCodPorDistResponse(_context);
    }

    /**
     * Obter os códigos postais para um distrito.
     * @param    designacaoDistrito    Required parameter: Example: 
     */
    public void getCodPorDistAsync(
                final String designacaoDistrito,
                final APICallBack<List<Distrito>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCodPorDistRequest(designacaoDistrito);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<Distrito> returnValue = _handleGetCodPorDistResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCodPorDist
     */
    private HttpRequest _buildGetCodPorDistRequest(
                final String designacaoDistrito) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/codigos");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("designacaoDistrito", designacaoDistrito);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCodPorDist
     * @return An object of type List<Distrito>
     */
    private List<Distrito> _handleGetCodPorDistResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<Distrito> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Distrito>>(){});

        return _result;
    }

    /**
     * Obter os códigos postais para um concelho.
     * @param    designacaoConcelho    Required parameter: Example: 
     * @return    Returns the List<CodigosConcelho> response from the API call 
     */
    public List<CodigosConcelho> getCodPorCon(
                final String designacaoConcelho
    ) throws Throwable {

        HttpRequest _request = _buildGetCodPorConRequest(designacaoConcelho);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCodPorConResponse(_context);
    }

    /**
     * Obter os códigos postais para um concelho.
     * @param    designacaoConcelho    Required parameter: Example: 
     */
    public void getCodPorConAsync(
                final String designacaoConcelho,
                final APICallBack<List<CodigosConcelho>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCodPorConRequest(designacaoConcelho);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<CodigosConcelho> returnValue = _handleGetCodPorConResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCodPorCon
     */
    private HttpRequest _buildGetCodPorConRequest(
                final String designacaoConcelho) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/codigos");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("designacaoConcelho", designacaoConcelho);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCodPorCon
     * @return An object of type List<CodigosConcelho>
     */
    private List<CodigosConcelho> _handleGetCodPorConResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<CodigosConcelho> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<CodigosConcelho>>(){});

        return _result;
    }

    /**
     * Obter os códigos postais para uma localidade.
     * @param    localidade    Required parameter: Example: 
     * @return    Returns the List<CodigosLocalidade> response from the API call 
     */
    public List<CodigosLocalidade> getCodPorLoc(
                final String localidade
    ) throws Throwable {

        HttpRequest _request = _buildGetCodPorLocRequest(localidade);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCodPorLocResponse(_context);
    }

    /**
     * Obter os códigos postais para uma localidade.
     * @param    localidade    Required parameter: Example: 
     */
    public void getCodPorLocAsync(
                final String localidade,
                final APICallBack<List<CodigosLocalidade>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCodPorLocRequest(localidade);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<CodigosLocalidade> returnValue = _handleGetCodPorLocResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCodPorLoc
     */
    private HttpRequest _buildGetCodPorLocRequest(
                final String localidade) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/codigos");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("localidade", localidade);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCodPorLoc
     * @return An object of type List<CodigosLocalidade>
     */
    private List<CodigosLocalidade> _handleGetCodPorLocResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<CodigosLocalidade> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<CodigosLocalidade>>(){});

        return _result;
    }

    /**
     * Obter os códigos postais para um arruamento.
     * @param    arruamento    Required parameter: Example: 
     * @return    Returns the List<CodPorRua1> response from the API call 
     */
    public List<CodPorRua1> getCodPorRua(
                final String arruamento
    ) throws Throwable {

        HttpRequest _request = _buildGetCodPorRuaRequest(arruamento);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCodPorRuaResponse(_context);
    }

    /**
     * Obter os códigos postais para um arruamento.
     * @param    arruamento    Required parameter: Example: 
     */
    public void getCodPorRuaAsync(
                final String arruamento,
                final APICallBack<List<CodPorRua1>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCodPorRuaRequest(arruamento);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<CodPorRua1> returnValue = _handleGetCodPorRuaResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCodPorRua
     */
    private HttpRequest _buildGetCodPorRuaRequest(
                final String arruamento) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/codigos");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("arruamento", arruamento);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCodPorRua
     * @return An object of type List<CodPorRua1>
     */
    private List<CodPorRua1> _handleGetCodPorRuaResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<CodPorRua1> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<CodPorRua1>>(){});

        return _result;
    }

    /**
     * Obter os códigos postais que se enquadram na combinação dos parâmetros passados.
     * @param    designacaoConcelho    Required parameter: Example: 
     * @param    localidade    Required parameter: Example: 
     * @param    arruamento    Required parameter: Example: 
     * @return    Returns the List<CodigosCombinar> response from the API call 
     */
    public List<CodigosCombinar> getCodCombo(
                final String designacaoConcelho,
                final String localidade,
                final String arruamento
    ) throws Throwable {

        HttpRequest _request = _buildGetCodComboRequest(designacaoConcelho, localidade, arruamento);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCodComboResponse(_context);
    }

    /**
     * Obter os códigos postais que se enquadram na combinação dos parâmetros passados.
     * @param    designacaoConcelho    Required parameter: Example: 
     * @param    localidade    Required parameter: Example: 
     * @param    arruamento    Required parameter: Example: 
     */
    public void getCodComboAsync(
                final String designacaoConcelho,
                final String localidade,
                final String arruamento,
                final APICallBack<List<CodigosCombinar>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCodComboRequest(designacaoConcelho, localidade, arruamento);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<CodigosCombinar> returnValue = _handleGetCodComboResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCodCombo
     */
    private HttpRequest _buildGetCodComboRequest(
                final String designacaoConcelho,
                final String localidade,
                final String arruamento) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/codigos");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("designacaoConcelho", designacaoConcelho);
        _queryParameters.put("localidade", localidade);
        _queryParameters.put("arruamento", arruamento);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCodCombo
     * @return An object of type List<CodigosCombinar>
     */
    private List<CodigosCombinar> _handleGetCodComboResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<CodigosCombinar> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<CodigosCombinar>>(){});

        return _result;
    }

    /**
     * Obter os códigos postais que se enquadram na combinação dos parâmetros passados. Este exemplo mostra todos os parâmetros.
     * @param    designacaoDistrito    Required parameter: Example: 
     * @param    designacaoConcelho    Required parameter: Example: 
     * @param    codPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     * @param    localidade    Required parameter: Example: 
     * @param    arruamento    Required parameter: Example: 
     * @return    Returns the List<CodComboAll1> response from the API call 
     */
    public List<CodComboAll1> getCodComboAll(
                final String designacaoDistrito,
                final String designacaoConcelho,
                final int codPostal4,
                final int codPostal3,
                final String localidade,
                final String arruamento
    ) throws Throwable {

        HttpRequest _request = _buildGetCodComboAllRequest(designacaoDistrito, designacaoConcelho, codPostal4, codPostal3, localidade, arruamento);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCodComboAllResponse(_context);
    }

    /**
     * Obter os códigos postais que se enquadram na combinação dos parâmetros passados. Este exemplo mostra todos os parâmetros.
     * @param    designacaoDistrito    Required parameter: Example: 
     * @param    designacaoConcelho    Required parameter: Example: 
     * @param    codPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     * @param    localidade    Required parameter: Example: 
     * @param    arruamento    Required parameter: Example: 
     */
    public void getCodComboAllAsync(
                final String designacaoDistrito,
                final String designacaoConcelho,
                final int codPostal4,
                final int codPostal3,
                final String localidade,
                final String arruamento,
                final APICallBack<List<CodComboAll1>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCodComboAllRequest(designacaoDistrito, designacaoConcelho, codPostal4, codPostal3, localidade, arruamento);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<CodComboAll1> returnValue = _handleGetCodComboAllResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCodComboAll
     */
    private HttpRequest _buildGetCodComboAllRequest(
                final String designacaoDistrito,
                final String designacaoConcelho,
                final int codPostal4,
                final int codPostal3,
                final String localidade,
                final String arruamento) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/codigos");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("designacaoDistrito", designacaoDistrito);
        _queryParameters.put("designacaoConcelho", designacaoConcelho);
        _queryParameters.put("codPostal4", codPostal4);
        _queryParameters.put("codPostal3", codPostal3);
        _queryParameters.put("localidade", localidade);
        _queryParameters.put("arruamento", arruamento);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCodComboAll
     * @return An object of type List<CodComboAll1>
     */
    private List<CodComboAll1> _handleGetCodComboAllResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<CodComboAll1> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<CodComboAll1>>(){});

        return _result;
    }

    /**
     * Erro. Parâmetros inválidos são:
     * [ designacaoDistrito | designacaoConcelho | designacaoConcelho | codPostal4 | codPostal3 | localidade | arruamento ]
     * @param    nomeConcelho    Required parameter: Example: 
     * @param    localidades    Required parameter: Example: 
     * @param    nomedarua    Required parameter: Example: 
     * @return    Returns the List<Combinar> response from the API call 
     */
    public List<Combinar> getCodErro1(
                final String nomeConcelho,
                final String localidades,
                final String nomedarua
    ) throws Throwable {

        HttpRequest _request = _buildGetCodErro1Request(nomeConcelho, localidades, nomedarua);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCodErro1Response(_context);
    }

    /**
     * Erro. Parâmetros inválidos são:
     * [ designacaoDistrito | designacaoConcelho | designacaoConcelho | codPostal4 | codPostal3 | localidade | arruamento ]
     * @param    nomeConcelho    Required parameter: Example: 
     * @param    localidades    Required parameter: Example: 
     * @param    nomedarua    Required parameter: Example: 
     */
    public void getCodErro1Async(
                final String nomeConcelho,
                final String localidades,
                final String nomedarua,
                final APICallBack<List<Combinar>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCodErro1Request(nomeConcelho, localidades, nomedarua);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<Combinar> returnValue = _handleGetCodErro1Response(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCodErro1
     */
    private HttpRequest _buildGetCodErro1Request(
                final String nomeConcelho,
                final String localidades,
                final String nomedarua) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/codigos");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("nomeConcelho", nomeConcelho);
        _queryParameters.put("localidades", localidades);
        _queryParameters.put("nomedarua", nomedarua);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCodErro1
     * @return An object of type List<Combinar>
     */
    private List<Combinar> _handleGetCodErro1Response(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 404) {
            throw new CodErro1Exception("Not Found", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<Combinar> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Combinar>>(){});

        return _result;
    }

    /**
     * Erro. Parâmetros inválidos são:
     * [ designacaoDistrito | designacaoConcelho | designacaoConcelho | codPostal4 | codPostal3 | localidade | arruamento ]
     * @param    casa    Required parameter: Example: 
     * @param    designacaoDistrito    Required parameter: Example: 
     * @param    designacaoConcelho    Required parameter: Example: 
     * @param    codPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     * @param    localidade    Required parameter: Example: 
     * @param    arruamento    Required parameter: Example: 
     * @return    Returns the List<CodigosDistrito> response from the API call 
     */
    public List<CodigosDistrito> getCodErro2(
                final String casa,
                final String designacaoDistrito,
                final String designacaoConcelho,
                final int codPostal4,
                final int codPostal3,
                final String localidade,
                final String arruamento
    ) throws Throwable {

        HttpRequest _request = _buildGetCodErro2Request(casa, designacaoDistrito, designacaoConcelho, codPostal4, codPostal3, localidade, arruamento);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCodErro2Response(_context);
    }

    /**
     * Erro. Parâmetros inválidos são:
     * [ designacaoDistrito | designacaoConcelho | designacaoConcelho | codPostal4 | codPostal3 | localidade | arruamento ]
     * @param    casa    Required parameter: Example: 
     * @param    designacaoDistrito    Required parameter: Example: 
     * @param    designacaoConcelho    Required parameter: Example: 
     * @param    codPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     * @param    localidade    Required parameter: Example: 
     * @param    arruamento    Required parameter: Example: 
     */
    public void getCodErro2Async(
                final String casa,
                final String designacaoDistrito,
                final String designacaoConcelho,
                final int codPostal4,
                final int codPostal3,
                final String localidade,
                final String arruamento,
                final APICallBack<List<CodigosDistrito>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCodErro2Request(casa, designacaoDistrito, designacaoConcelho, codPostal4, codPostal3, localidade, arruamento);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<CodigosDistrito> returnValue = _handleGetCodErro2Response(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCodErro2
     */
    private HttpRequest _buildGetCodErro2Request(
                final String casa,
                final String designacaoDistrito,
                final String designacaoConcelho,
                final int codPostal4,
                final int codPostal3,
                final String localidade,
                final String arruamento) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/codigos");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("casa", casa);
        _queryParameters.put("designacaoDistrito", designacaoDistrito);
        _queryParameters.put("designacaoConcelho", designacaoConcelho);
        _queryParameters.put("codPostal4", codPostal4);
        _queryParameters.put("codPostal3", codPostal3);
        _queryParameters.put("localidade", localidade);
        _queryParameters.put("arruamento", arruamento);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCodErro2
     * @return An object of type List<CodigosDistrito>
     */
    private List<CodigosDistrito> _handleGetCodErro2Response(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 501) {
            throw new CodErro1Exception("Not Implemented", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<CodigosDistrito> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<CodigosDistrito>>(){});

        return _result;
    }

}
