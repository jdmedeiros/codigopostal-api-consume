/*
 * CodigoPostalPortugalLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;

import com.example.*;
import com.example.models.*;
import com.example.exceptions.*;
import com.example.http.client.HttpClient;
import com.example.http.client.HttpContext;
import com.example.http.request.HttpRequest;
import com.example.http.response.HttpResponse;
import com.example.http.response.HttpStringResponse;
import com.example.http.client.APICallBack;
import com.example.controllers.syncwrapper.APICallBackCatcher;

public class MoradasController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static MoradasController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the MoradasController class 
     */
    public static MoradasController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new MoradasController();
                }
            }
        }
        return instance;
    }

    /**
     * Obter todos os registos.
     * @return    Returns the List<MorTodas1> response from the API call 
     */
    public List<MorTodas1> getMorTodas(
    ) throws Throwable {

        HttpRequest _request = _buildGetMorTodasRequest();
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetMorTodasResponse(_context);
    }

    /**
     * Obter todos os registos.
     */
    public void getMorTodasAsync(
                final APICallBack<List<MorTodas1>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetMorTodasRequest();
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<MorTodas1> returnValue = _handleGetMorTodasResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getMorTodas
     */
    private HttpRequest _buildGetMorTodasRequest() throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/moradas");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getMorTodas
     * @return An object of type List<MorTodas1>
     */
    private List<MorTodas1> _handleGetMorTodasResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<MorTodas1> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<MorTodas1>>(){});

        return _result;
    }

    /**
     * Obter todos os códigos postais com base em 4 digitos.
     * @param    codPostal4    Required parameter: Example: 
     * @return    Returns the List<MorCodigo4A> response from the API call 
     */
    public List<MorCodigo4A> getMorCodigo4(
                final int codPostal4
    ) throws Throwable {

        HttpRequest _request = _buildGetMorCodigo4Request(codPostal4);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetMorCodigo4Response(_context);
    }

    /**
     * Obter todos os códigos postais com base em 4 digitos.
     * @param    codPostal4    Required parameter: Example: 
     */
    public void getMorCodigo4Async(
                final int codPostal4,
                final APICallBack<List<MorCodigo4A>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetMorCodigo4Request(codPostal4);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<MorCodigo4A> returnValue = _handleGetMorCodigo4Response(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getMorCodigo4
     */
    private HttpRequest _buildGetMorCodigo4Request(
                final int codPostal4) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/moradas");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("codPostal4", codPostal4);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getMorCodigo4
     * @return An object of type List<MorCodigo4A>
     */
    private List<MorCodigo4A> _handleGetMorCodigo4Response(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<MorCodigo4A> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<MorCodigo4A>>(){});

        return _result;
    }

    /**
     * Obter todos os códigos postais com base em 7 digitos.
     * @param    codPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     * @return    Returns the List<MorCodigo7A> response from the API call 
     */
    public List<MorCodigo7A> getMorCodigo7(
                final int codPostal4,
                final int codPostal3
    ) throws Throwable {

        HttpRequest _request = _buildGetMorCodigo7Request(codPostal4, codPostal3);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetMorCodigo7Response(_context);
    }

    /**
     * Obter todos os códigos postais com base em 7 digitos.
     * @param    codPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     */
    public void getMorCodigo7Async(
                final int codPostal4,
                final int codPostal3,
                final APICallBack<List<MorCodigo7A>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetMorCodigo7Request(codPostal4, codPostal3);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<MorCodigo7A> returnValue = _handleGetMorCodigo7Response(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getMorCodigo7
     */
    private HttpRequest _buildGetMorCodigo7Request(
                final int codPostal4,
                final int codPostal3) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/moradas");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("codPostal4", codPostal4);
        _queryParameters.put("codPostal3", codPostal3);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getMorCodigo7
     * @return An object of type List<MorCodigo7A>
     */
    private List<MorCodigo7A> _handleGetMorCodigo7Response(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<MorCodigo7A> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<MorCodigo7A>>(){});

        return _result;
    }

    /**
     * Erro. Parâmetros válidos: [ codPostal4 [ codPostal3 ] ]
     * @param    codigoPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     * @return    Returns the List<MorCodigo7A> response from the API call 
     */
    public List<MorCodigo7A> getMorErro1(
                final int codigoPostal4,
                final int codPostal3
    ) throws Throwable {

        HttpRequest _request = _buildGetMorErro1Request(codigoPostal4, codPostal3);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetMorErro1Response(_context);
    }

    /**
     * Erro. Parâmetros válidos: [ codPostal4 [ codPostal3 ] ]
     * @param    codigoPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     */
    public void getMorErro1Async(
                final int codigoPostal4,
                final int codPostal3,
                final APICallBack<List<MorCodigo7A>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetMorErro1Request(codigoPostal4, codPostal3);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<MorCodigo7A> returnValue = _handleGetMorErro1Response(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getMorErro1
     */
    private HttpRequest _buildGetMorErro1Request(
                final int codigoPostal4,
                final int codPostal3) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/moradas");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("codigoPostal4", codigoPostal4);
        _queryParameters.put("codPostal3", codPostal3);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getMorErro1
     * @return An object of type List<MorCodigo7A>
     */
    private List<MorCodigo7A> _handleGetMorErro1Response(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 404) {
            throw new MorErro1Exception("Not Found", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<MorCodigo7A> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<MorCodigo7A>>(){});

        return _result;
    }

    /**
     * Erro. Parâmetros válidos: [ codPostal4 [ codPostal3 ] ]
     * @param    codPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     * @param    localidade    Required parameter: Example: 
     * @return    Returns the List<MorCodigo7A> response from the API call 
     */
    public List<MorCodigo7A> getMorErro2(
                final int codPostal4,
                final int codPostal3,
                final String localidade
    ) throws Throwable {

        HttpRequest _request = _buildGetMorErro2Request(codPostal4, codPostal3, localidade);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetMorErro2Response(_context);
    }

    /**
     * Erro. Parâmetros válidos: [ codPostal4 [ codPostal3 ] ]
     * @param    codPostal4    Required parameter: Example: 
     * @param    codPostal3    Required parameter: Example: 
     * @param    localidade    Required parameter: Example: 
     */
    public void getMorErro2Async(
                final int codPostal4,
                final int codPostal3,
                final String localidade,
                final APICallBack<List<MorCodigo7A>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetMorErro2Request(codPostal4, codPostal3, localidade);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<MorCodigo7A> returnValue = _handleGetMorErro2Response(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getMorErro2
     */
    private HttpRequest _buildGetMorErro2Request(
                final int codPostal4,
                final int codPostal3,
                final String localidade) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/moradas");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("codPostal4", codPostal4);
        _queryParameters.put("codPostal3", codPostal3);
        _queryParameters.put("localidade", localidade);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getMorErro2
     * @return An object of type List<MorCodigo7A>
     */
    private List<MorCodigo7A> _handleGetMorErro2Response(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 501) {
            throw new MorErro1Exception("Not Implemented", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<MorCodigo7A> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<MorCodigo7A>>(){});

        return _result;
    }

}
